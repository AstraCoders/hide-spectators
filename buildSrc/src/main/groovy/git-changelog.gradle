project.ext.mod_changelog = 'No changelog was provided. Please refer to the project page for more information.'

task genChangelog() {
    try {
        project.mod_changelog = 'No changelog was provided. Please refer to the project page for more information.'
        def gitCommit = System.getenv('GIT_COMMIT') ?: getExecOutput(['git', 'log', '-n', '1', '--pretty=tformat:%h'])
        def gitPrevCommit = System.getenv('GIT_PREVIOUS_COMMIT')

        // If a full range is available use that range.
        if (gitCommit && gitPrevCommit) {
            project.ext.mod_changelog = getExecOutput(['git', 'log', "--pretty=tformat:- %s", '' + gitPrevCommit + '..' + gitCommit])
            project.logger.lifecycle("Generated changelog using commits ${gitPrevCommit} to ${gitCommit}.")
        }

        // If only one commit is available, use the last commit.
        else if (gitCommit) {
            project.ext.mod_changelog = getExecOutput(['git', 'log', '' + "--pretty=tformat:- %s", '-1', '' + gitCommit])
            project.logger.lifecycle("Generated changelog using commit ${gitCommit}.")
        }

        // write changelog to file
        rootDir.toPath().resolve('CHANGELOG.md').toFile().write("## Changelog\n\n${project.ext.mod_changelog}")
//    rootDir.toPath().resolve("LAST_COMMIT").toFile().write(gitCommit)
//    file('CHANGELOG.md').write(project.ext.mod_changelog)
    } catch (Exception e) {
        project.logger.warn("Changelogs could not be generated! ${e.message}")
    }
}

rootProject.ext.mod_changelog = rootDir.toPath().resolve('CHANGELOG.md').toFile().text

def getExecOutput(commands) {
    def out = new ByteArrayOutputStream()

    exec {
        commandLine commands
        standardOutput out
    }

    return out.toString().trim()
}
